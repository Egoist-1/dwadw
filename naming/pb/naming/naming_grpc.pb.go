// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: naming.proto

package naming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Naming_Load_FullMethodName       = "/greet.Naming/Load"
	Naming_AddHost_FullMethodName    = "/greet.Naming/AddHost"
	Naming_GetAllInfo_FullMethodName = "/greet.Naming/GetAllInfo"
	Naming_UpdateHost_FullMethodName = "/greet.Naming/UpdateHost"
)

// NamingClient is the client API for Naming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// goctl rpc protoc naming.proto --go_out=./pb --go-grpc_out=./pb --zrpc_out=. --client=true -m
type NamingClient interface {
	Load(ctx context.Context, in *LoadReq, opts ...grpc.CallOption) (*LoadRes, error)
	AddHost(ctx context.Context, in *AddHostReq, opts ...grpc.CallOption) (*AddHostRes, error)
	GetAllInfo(ctx context.Context, in *GetAllInfoReq, opts ...grpc.CallOption) (*GetAllInfoReqRes, error)
	UpdateHost(ctx context.Context, in *UpdateHostReq, opts ...grpc.CallOption) (*UpdateHostRes, error)
}

type namingClient struct {
	cc grpc.ClientConnInterface
}

func NewNamingClient(cc grpc.ClientConnInterface) NamingClient {
	return &namingClient{cc}
}

func (c *namingClient) Load(ctx context.Context, in *LoadReq, opts ...grpc.CallOption) (*LoadRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadRes)
	err := c.cc.Invoke(ctx, Naming_Load_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) AddHost(ctx context.Context, in *AddHostReq, opts ...grpc.CallOption) (*AddHostRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddHostRes)
	err := c.cc.Invoke(ctx, Naming_AddHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) GetAllInfo(ctx context.Context, in *GetAllInfoReq, opts ...grpc.CallOption) (*GetAllInfoReqRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllInfoReqRes)
	err := c.cc.Invoke(ctx, Naming_GetAllInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) UpdateHost(ctx context.Context, in *UpdateHostReq, opts ...grpc.CallOption) (*UpdateHostRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHostRes)
	err := c.cc.Invoke(ctx, Naming_UpdateHost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamingServer is the server API for Naming service.
// All implementations must embed UnimplementedNamingServer
// for forward compatibility.
//
// goctl rpc protoc naming.proto --go_out=./pb --go-grpc_out=./pb --zrpc_out=. --client=true -m
type NamingServer interface {
	Load(context.Context, *LoadReq) (*LoadRes, error)
	AddHost(context.Context, *AddHostReq) (*AddHostRes, error)
	GetAllInfo(context.Context, *GetAllInfoReq) (*GetAllInfoReqRes, error)
	UpdateHost(context.Context, *UpdateHostReq) (*UpdateHostRes, error)
	mustEmbedUnimplementedNamingServer()
}

// UnimplementedNamingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNamingServer struct{}

func (UnimplementedNamingServer) Load(context.Context, *LoadReq) (*LoadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Load not implemented")
}
func (UnimplementedNamingServer) AddHost(context.Context, *AddHostReq) (*AddHostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHost not implemented")
}
func (UnimplementedNamingServer) GetAllInfo(context.Context, *GetAllInfoReq) (*GetAllInfoReqRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInfo not implemented")
}
func (UnimplementedNamingServer) UpdateHost(context.Context, *UpdateHostReq) (*UpdateHostRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHost not implemented")
}
func (UnimplementedNamingServer) mustEmbedUnimplementedNamingServer() {}
func (UnimplementedNamingServer) testEmbeddedByValue()                {}

// UnsafeNamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamingServer will
// result in compilation errors.
type UnsafeNamingServer interface {
	mustEmbedUnimplementedNamingServer()
}

func RegisterNamingServer(s grpc.ServiceRegistrar, srv NamingServer) {
	// If the following call pancis, it indicates UnimplementedNamingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Naming_ServiceDesc, srv)
}

func _Naming_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Naming_Load_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).Load(ctx, req.(*LoadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_AddHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).AddHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Naming_AddHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).AddHost(ctx, req.(*AddHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_GetAllInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).GetAllInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Naming_GetAllInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).GetAllInfo(ctx, req.(*GetAllInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_UpdateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).UpdateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Naming_UpdateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).UpdateHost(ctx, req.(*UpdateHostReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Naming_ServiceDesc is the grpc.ServiceDesc for Naming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Naming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet.Naming",
	HandlerType: (*NamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Load",
			Handler:    _Naming_Load_Handler,
		},
		{
			MethodName: "AddHost",
			Handler:    _Naming_AddHost_Handler,
		},
		{
			MethodName: "GetAllInfo",
			Handler:    _Naming_GetAllInfo_Handler,
		},
		{
			MethodName: "UpdateHost",
			Handler:    _Naming_UpdateHost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "naming.proto",
}
