// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.4
// source: rpc/naming.proto

package naming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamingClient is the client API for Naming service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamingClient interface {
	// 查询示例列表
	GetNamingList(ctx context.Context, in *NamingReq, opts ...grpc.CallOption) (*NamingListRes, error)
	// 查询示例详情
	GetNamingInfo(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*NamingInfoRes, error)
	// 新增示例
	AddNaming(ctx context.Context, in *NamingInfoRes, opts ...grpc.CallOption) (*StringRes, error)
	// 删除示例
	DelNaming(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*StringRes, error)
	// 批量删除示例
	BatchDelNaming(ctx context.Context, in *IdListReq, opts ...grpc.CallOption) (*StringRes, error)
	// 修改示例
	UpdateNaming(ctx context.Context, in *NamingInfoRes, opts ...grpc.CallOption) (*StringRes, error)
}

type namingClient struct {
	cc grpc.ClientConnInterface
}

func NewNamingClient(cc grpc.ClientConnInterface) NamingClient {
	return &namingClient{cc}
}

func (c *namingClient) GetNamingList(ctx context.Context, in *NamingReq, opts ...grpc.CallOption) (*NamingListRes, error) {
	out := new(NamingListRes)
	err := c.cc.Invoke(ctx, "/naming.naming/GetNamingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) GetNamingInfo(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*NamingInfoRes, error) {
	out := new(NamingInfoRes)
	err := c.cc.Invoke(ctx, "/naming.naming/GetNamingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) AddNaming(ctx context.Context, in *NamingInfoRes, opts ...grpc.CallOption) (*StringRes, error) {
	out := new(StringRes)
	err := c.cc.Invoke(ctx, "/naming.naming/AddNaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) DelNaming(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*StringRes, error) {
	out := new(StringRes)
	err := c.cc.Invoke(ctx, "/naming.naming/DelNaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) BatchDelNaming(ctx context.Context, in *IdListReq, opts ...grpc.CallOption) (*StringRes, error) {
	out := new(StringRes)
	err := c.cc.Invoke(ctx, "/naming.naming/BatchDelNaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namingClient) UpdateNaming(ctx context.Context, in *NamingInfoRes, opts ...grpc.CallOption) (*StringRes, error) {
	out := new(StringRes)
	err := c.cc.Invoke(ctx, "/naming.naming/UpdateNaming", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamingServer is the server API for Naming service.
// All implementations must embed UnimplementedNamingServer
// for forward compatibility
type NamingServer interface {
	// 查询示例列表
	GetNamingList(context.Context, *NamingReq) (*NamingListRes, error)
	// 查询示例详情
	GetNamingInfo(context.Context, *IdReq) (*NamingInfoRes, error)
	// 新增示例
	AddNaming(context.Context, *NamingInfoRes) (*StringRes, error)
	// 删除示例
	DelNaming(context.Context, *IdReq) (*StringRes, error)
	// 批量删除示例
	BatchDelNaming(context.Context, *IdListReq) (*StringRes, error)
	// 修改示例
	UpdateNaming(context.Context, *NamingInfoRes) (*StringRes, error)
	mustEmbedUnimplementedNamingServer()
}

// UnimplementedNamingServer must be embedded to have forward compatible implementations.
type UnimplementedNamingServer struct {
}

func (UnimplementedNamingServer) GetNamingList(context.Context, *NamingReq) (*NamingListRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamingList not implemented")
}
func (UnimplementedNamingServer) GetNamingInfo(context.Context, *IdReq) (*NamingInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamingInfo not implemented")
}
func (UnimplementedNamingServer) AddNaming(context.Context, *NamingInfoRes) (*StringRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNaming not implemented")
}
func (UnimplementedNamingServer) DelNaming(context.Context, *IdReq) (*StringRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNaming not implemented")
}
func (UnimplementedNamingServer) BatchDelNaming(context.Context, *IdListReq) (*StringRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDelNaming not implemented")
}
func (UnimplementedNamingServer) UpdateNaming(context.Context, *NamingInfoRes) (*StringRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNaming not implemented")
}
func (UnimplementedNamingServer) mustEmbedUnimplementedNamingServer() {}

// UnsafeNamingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamingServer will
// result in compilation errors.
type UnsafeNamingServer interface {
	mustEmbedUnimplementedNamingServer()
}

func RegisterNamingServer(s grpc.ServiceRegistrar, srv NamingServer) {
	s.RegisterService(&Naming_ServiceDesc, srv)
}

func _Naming_GetNamingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).GetNamingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.naming/GetNamingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).GetNamingList(ctx, req.(*NamingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_GetNamingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).GetNamingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.naming/GetNamingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).GetNamingInfo(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_AddNaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamingInfoRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).AddNaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.naming/AddNaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).AddNaming(ctx, req.(*NamingInfoRes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_DelNaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).DelNaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.naming/DelNaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).DelNaming(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_BatchDelNaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).BatchDelNaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.naming/BatchDelNaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).BatchDelNaming(ctx, req.(*IdListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Naming_UpdateNaming_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamingInfoRes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamingServer).UpdateNaming(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/naming.naming/UpdateNaming",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamingServer).UpdateNaming(ctx, req.(*NamingInfoRes))
	}
	return interceptor(ctx, in, info, handler)
}

// Naming_ServiceDesc is the grpc.ServiceDesc for Naming service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Naming_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "naming.naming",
	HandlerType: (*NamingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamingList",
			Handler:    _Naming_GetNamingList_Handler,
		},
		{
			MethodName: "GetNamingInfo",
			Handler:    _Naming_GetNamingInfo_Handler,
		},
		{
			MethodName: "AddNaming",
			Handler:    _Naming_AddNaming_Handler,
		},
		{
			MethodName: "DelNaming",
			Handler:    _Naming_DelNaming_Handler,
		},
		{
			MethodName: "BatchDelNaming",
			Handler:    _Naming_BatchDelNaming_Handler,
		},
		{
			MethodName: "UpdateNaming",
			Handler:    _Naming_UpdateNaming_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/naming.proto",
}
