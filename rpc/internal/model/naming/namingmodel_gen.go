// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.1

package naming

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	namingFieldNames          = builder.RawFieldNames(&Naming{})
	namingRows                = strings.Join(namingFieldNames, ",")
	namingRowsExpectAutoSet   = strings.Join(stringx.Remove(namingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	namingRowsWithPlaceHolder = strings.Join(stringx.Remove(namingFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheNamingNamingIdPrefix = "cache:naming:naming:id:"
)

type (
	namingModel interface {
		Insert(ctx context.Context, data *Naming) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Naming, error)
		Update(ctx context.Context, data *Naming) error
		Delete(ctx context.Context, id int64) error
	}

	defaultNamingModel struct {
		sqlc.CachedConn
		table string
	}

	Naming struct {
		Id        int64     `db:"id"`         // 自增主键ID
		Naming    string    `db:"naming"`     // caddy的host
		CreatedAt time.Time `db:"created_at"` // 创建时间
		UpdatedAt time.Time `db:"updated_at"` // 更新时间
	}
)

func newNamingModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultNamingModel {
	return &defaultNamingModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`naming`",
	}
}

func (m *defaultNamingModel) Delete(ctx context.Context, id int64) error {
	namingNamingIdKey := fmt.Sprintf("%s%v", cacheNamingNamingIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, namingNamingIdKey)
	return err
}

func (m *defaultNamingModel) FindOne(ctx context.Context, id int64) (*Naming, error) {
	namingNamingIdKey := fmt.Sprintf("%s%v", cacheNamingNamingIdPrefix, id)
	var resp Naming
	err := m.QueryRowCtx(ctx, &resp, namingNamingIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", namingRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultNamingModel) Insert(ctx context.Context, data *Naming) (sql.Result, error) {
	namingNamingIdKey := fmt.Sprintf("%s%v", cacheNamingNamingIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?)", m.table, namingRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Naming)
	}, namingNamingIdKey)
	return ret, err
}

func (m *defaultNamingModel) Update(ctx context.Context, data *Naming) error {
	namingNamingIdKey := fmt.Sprintf("%s%v", cacheNamingNamingIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, namingRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Naming, data.Id)
	}, namingNamingIdKey)
	return err
}

func (m *defaultNamingModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheNamingNamingIdPrefix, primary)
}

func (m *defaultNamingModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", namingRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultNamingModel) tableName() string {
	return m.table
}
